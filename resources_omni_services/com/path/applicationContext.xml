<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-3.0.xsd">



	<bean id="contextApplicationContextProvider"
		class="com.path.lib.common.util.ApplicationContextProvider">
	</bean>
	<!-- should be located after contextApplicationContextProvider -->
	<import resource="classpath:com/path/conf/**/*Context.xml" />
	<!-- for Web services Exposing -->
	<import resource="classpath:com/path/applicationWebServices.xml" />
	<import
		resource="classpath:com/path/applicationRestWebServices.xml" />
	<import resource="classpath:com/path/applicationFacebook.xml" />
	<!-- for BO Exposing -->
	<import resource="classpath:com/path/applicationBOExporters.xml" />

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize">
			<value>10000000</value>
		</property>
	</bean>

	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:PathRemoting.properties</value>
				<value>classpath:PathOSRVRemoting.properties</value>
				<value>classpath:CoreServicesIntegration.properties</value>
				<value>classpath:PathOADMMap.properties</value>
				<value>classpath:PathServices.properties</value>
				<value>classpath:Social.properties</value>
				<value>classpath:twitter4j.properties</value>
				<value>classpath:PathWebServicesList.properties</value>
				<value>classpath:cancelReservation.properties</value>
			</list>
		</property>
	</bean>
	<bean id="pathRemotingPropertiesProvider"
		class="com.path.lib.remote.PathRemotingPropertiesProvider" />

	<bean id="pathBeanFactory"
		class="com.path.lib.remote.PathServiceBeanFactory" />

	<!-- in order to imal_service be able to deploy properly after reporting 
		been added we need to make sure that reporting are called remotely -->
	<bean class="com.path.lib.remote.PathBeanFactoryPostProcessor">
		<property name="beanAvailability" value="${beanAvailability}" />
	</bean>
	<bean id="reportingServiceBeanFactory"
		class="com.path.lib.remote.PathBeanFactory">
		<property name="beanAvailability"
			value="${reporting.beanAvailability}" />
		<property name="serviceURL" value="${reporting.serviceURL}" />
	</bean>
	<bean id="omniServiceBeanFactory"
		class="com.path.lib.remote.PathServiceBeanFactory">
	</bean>

	<!-- <bean id="jeDataSource" -->
	<!-- class="org.springframework.jndi.JndiObjectFactoryBean"> -->
	<!-- <property name="jndiName" value="${services.oadm.jndi}" /> -->
	<!-- </bean> -->

	<!-- <bean id="transactionAwareDataSourceProxy" -->
	<!-- class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
	<!-- <property name="driverClassName" -->
	<!-- value="com.mysql.jdbc.Driver"></property> -->
	<!-- <property name="url" -->
	<!-- value="jdbc:mysql://localhost:3306/oadmmigdb"></property> -->
	<!-- <property name="username" value="root"></property> -->
	<!-- <property name="password" value="123456"></property> -->
	<!-- </bean> -->

	<bean
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		id="transactionAwareDataSourceProxy">
		<property name="driverClassName"
			value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3307/oadmmigdb?useSSL=false&amp;useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=Asia/Beirut" />
		<property name="username" value="root" />
		<property name="password" value="1234" />
	</bean>

	<!-- <bean id="jeTransactionManager" -->
	<!-- class="org.springframework.jdbc.core.JdbcTemplate"> -->
	<!-- <property name="dataSource" -->
	<!-- ref="transactionAwareDataSourceProxy"></property> -->
	<!-- </bean> -->

	<!-- <bean id="transactionAwareDataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy"> 
		<property name="targetDataSource" ref="jeDataSource"/> </bean> <bean id="jeTransactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="transactionAwareDataSourceProxy"/> </bean> -->


	<bean id="baseBO" abstract="true">
		<property name="genericDAO" ref="genericDAO"></property>
	</bean>

	<bean id="genericDAO" parent="baseDAO"
		class="com.path.lib.common.base.GenericDAOImpl">
	</bean>



	<bean id="baseDAO" abstract="true">
		<property name="sqlMap" ref="sqlMapClient" />
		<property name="datasourceJNDI" value="${services.oadm.jndi}" />
	</bean>


	<bean id="sqlSessionFactProps"
		class="com.path.lib.common.base.ibatis3.SqlSessionFactProps">
		<property name="configLocation"
			value="classpath:com/path/conf/sql-mapper-config.xml"></property>
		<property name="mapperLocations">
			<list>
				<value>${services.commonMappers}</value>
			</list>
		</property>
		<property name="failFast" value="true"></property>
		<property name="sybaseMappers"
			value="${services.sybaseMappers}"></property>
		<property name="oraMappers" value="${services.oraMappers}"></property>
		<property name="mapEnc" value="${mappersServices.encrypted}"></property>
	</bean>
	<bean id="sqlMapClientIbatisInst"
		class="com.path.lib.common.base.ibatis3.SqlSessionFactoryBean"
		scope="prototype">
	</bean>

	<bean id="sqlMapClientIbatis"
		class="com.path.lib.common.base.ibatis3.SqlSessionFactoryBean">
		<constructor-arg type="java.util.HashMap">
			<map>
				<entry key="sqlSessionFactProps"
					value-ref="sqlSessionFactProps"></entry>
				<entry key="dataSource"
					value-ref="transactionAwareDataSourceProxy"></entry>
			</map>
		</constructor-arg>

	</bean>

	<bean id="sqlMapClient"
		class="com.path.lib.common.base.IbatisSqlMapClient">
		<property name="sqlMapClient" ref="sqlMapClientIbatis" />
	</bean>

	<!-- <bean id="jeMatchAllTxInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor" 
		> <property name="transactionManager" ref="jeTransactionManager"/> <property 
		name="transactionAttributes"> <props> <prop key="*NewTrans" >PROPAGATION_REQUIRES_NEW, 
		-Exception</prop> <prop key="*">PROPAGATION_REQUIRED, -Exception</prop> </props> 
		</property> </bean> -->

	<!-- <bean id="interceptorTransaction" class="com.path.lib.common.interceptor.PathBeanNameAutoProxyCreator"> 
		<property name="interceptorNames"> <list> <idref bean="jeMatchAllTxInterceptor" 
		/> </list> </property> Common transaction beans reference available in ServiceCommonContext, 
		this property should be located before bean Names <property name="addBeanNames" 
		ref="commmonTransBeans"/> <property name="beanNames" > <list> list of transaction 
		beans , in imal_service all are located in addBeanNames property <value>omniUserBO</value> 
		</list> </property> </bean> -->

	<bean name="timeoutInterceptor"
		class="com.path.lib.common.interceptor.TimeoutInterceptor">
		<property name="timeoutProps">
			<props><!-- Timeout parameters for method to be given here -->
				<prop key=""></prop><!-- milliseconds(mi), seconds(s), hours(h), days(d), 
					microseconds(mic), minutes(m) -->
			</props>
		</property>
	</bean>

	<bean name="timeoutAdvisor"
		class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
		<property name="advice" ref="timeoutInterceptor" />
		<property name="mappedNames">
			<list>
				<value></value><!-- Method name for timeout to be given here -->
			</list>
		</property>
	</bean>

	<bean name="timeoutMapper"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>
				<idref bean="timeoutAdvisor" />
			</list>
		</property>
		<property name="beanNames">
			<list>
				<value></value><!-- The bean in which the method to be timed out lies, 
					is to be given here -->
			</list>
		</property>
	</bean>

	<bean id="OmniServicesProxy"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>omniCommonServices</value>
				<value>omniCommonPullWebServices</value>
				<value>omniCommonPushWebServices</value>
			</list>
		</property>

		<property name="interceptorNames">
			<list>
				<value>OmniServicesAdvisor</value>
			</list>
		</property>
	</bean>
	<bean id="OmniServicesAdvisor"
		class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
		<property name="mappedName" value="*_service" />
		<property name="advice" ref="OmniServicesAdvice" />
	</bean>
	<bean id="omniServicesValidator"
		class="com.path.ws.omni.interceptor.OmniServicesValidator">
	</bean>
	<bean id="OmniServicesAdvice"
		class="com.path.ws.omni.interceptor.OmniServicesInterceptor">
		<property name="omniClientPullDAO" ref="omniClientPullDAO"></property>
		<property name="omniCommonPullDAO" ref="omniCommonPullDAO"></property>
		<property name="omniCommonPushDAO" ref="omniCommonPushDAO"></property>

	</bean>

	<!-- <bean id="interceptOmniCommonBO" -->
	<!-- factory-bean="omniServiceBeanFactory" factory-method="getInstance" -->
	<!-- parent="omniBaseBO"> -->
	<!-- </bean> -->

	<!-- <bean id="moskitoAspect" -->
	<!-- class="org.anotheria.moskitoexamples.spring2.SpringAspect" /> -->
	<!-- <aop:config proxy-target-class="true"> -->
	<!-- <aop:aspect ref="moskitoAspect" order="1"> -->
	<!-- <aop:around method="doProfiling" -->
	<!-- pointcut="org.anotheria.moskitoexamples.spring2.SpringAspect.aroundEveryMethod() -->
	<!-- and target(org.anotheria.moskitoexamples.spring2.b.BServiceImpl)" /> -->
	<!-- </aop:aspect> -->
	<!-- <aop:aspect ref="moskitoAspect" order="1"> -->
	<!-- <aop:around method="doProfiling" -->
	<!-- pointcut="org.anotheria.moskitoexamples.spring2.SpringAspect.aroundEveryMethod() -->
	<!-- and @within(net.anotheria.moskito.aop.annotation.Monitor)" /> -->
	<!-- </aop:aspect> -->
	<!-- </aop:config> -->


	<!-- start AOP -->
	<!-- <bean id="moskitoAspect" -->
	<!-- class="org.anotheria.moskitoexamples.spring2.SpringAspect" /> -->
	<!-- <aop:config proxy-target-class="true"> -->
	<!-- <aop:aspect ref="moskitoAspect" order="1"> -->
	<!-- <aop:around method="doProfiling" -->
	<!-- pointcut="org.anotheria.moskitoexamples.spring2.SpringAspect.aroundEveryMethod() 
		and target(org.anotheria.moskitoexamples.spring2.b.BServiceImpl)" /> -->
	<!-- </aop:aspect> -->
	<!-- <aop:aspect ref="moskitoAspect" order="1"> -->
	<!-- <aop:around method="doProfiling" -->
	<!-- pointcut="org.anotheria.moskitoexamples.spring2.SpringAspect.aroundEveryMethod() 
		and @within(net.anotheria.moskito.aop.annotation.Monitor)" /> -->
	<!-- </aop:aspect> -->
	<!-- </aop:config> -->
	<!-- end of AOP -->


 
   
	

</beans>
